// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id                  String           @id @default(uuid())
  email               String           @unique
  displayName         String           @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
  roles               String
  groups              UsersGroups[]
  votes               Vote[]
  voteId              Int
  reviews             Review[]
  reviewId            Int
  Poll                Poll[]
}

model UserCredential {
  id         String  @id
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model Group {
  id           Int               @id @default(autoincrement())
  name         String
  isAdmin      Boolean
  adminId      Int               @unique
  users        UsersGroups[]
  restaurants  RestaurantGroup[]
  restaurantId Int
  public       Boolean           @default(false)
  Poll         Poll[]
  Restaurant   Restaurant        @relation(fields: [restaurantId], references: [id])
}

model UsersGroups {
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  Int
  joinedAt DateTime @default(now())
  approved Boolean  @default(false)

  @@id([userId, groupId])
}

model RestaurantGroup {
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  public       Boolean    @default(false)
  group        Group      @relation(fields: [groupId], references: [id])
  groupId      Int
  Poll         Poll[]
}

model Restaurant {
  id       Int               @id @default(autoincrement())
  name     String
  groups   RestaurantGroup[]
  votes    Vote[]
  voteId   Int
  reviews  Review[]
  reviewId Int
  Poll     Poll?             @relation(fields: [pollId], references: [id])
  pollId   Int?
  Group    Group[]
}

model Vote {
  id           Int        @id @default(autoincrement())
  userId       String     @unique
  restaurantId Int
  value        String
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  Poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       Int
}

model Poll {
  id                Int              @id @default(autoincrement())
  groupId           Int
  group             Group            @relation(fields: [groupId], references: [id])
  restaurants       Restaurant[]
  votes             Vote[]
  voteId            Int
  reviews           Review[]
  reviewId          Int
  type              String
  status            String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  expiresAt         DateTime
  createdBy         String
  createdByUser     User             @relation(fields: [createdBy], references: [id])
  RestaurantGroup   RestaurantGroup? @relation(fields: [restaurantGroupId], references: [id])
  restaurantGroupId Int?
}

model Review {
  id           Int        @id @default(autoincrement())
  userId       String
  restaurantId Int
  content      String
  rating       Int
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  Poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       Int
}
